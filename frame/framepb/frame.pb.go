// Code generated by protoc-gen-go.
// source: frame.proto
// DO NOT EDIT!

/*
Package framepb is a generated protocol buffer package.

It is generated from these files:
	frame.proto

It has these top-level messages:
	C2SClientSessionPing
	S2CClientSessionPong
	S2SServerSessionVeriryReq
	S2SServerSessionVeriryAck
	S2SServerSessionPing
	S2SServerSessionPong
	S2SClientSessionPing
	S2SClientSessionPong
	SdConnAttr
	ServiceDiscovery
	ServiceDiscoveryReq
	ServiceDiscoveryAck
*/
package framepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type EClient2GameMsgId int32

const (
	EClient2GameMsgId_cs_invalid_msg_id          EClient2GameMsgId = 0
	EClient2GameMsgId_cs_logic_min_msg_id        EClient2GameMsgId = 1
	EClient2GameMsgId_sc_logic_max_msg_id        EClient2GameMsgId = 60000
	EClient2GameMsgId_cs_engine_min_msg_id       EClient2GameMsgId = 60001
	EClient2GameMsgId_c2s_client_session_ping_id EClient2GameMsgId = 60002
	EClient2GameMsgId_s2c_client_session_pong_id EClient2GameMsgId = 60003
	EClient2GameMsgId_sc_engine_min_msg_id       EClient2GameMsgId = 65535
)

var EClient2GameMsgId_name = map[int32]string{
	0:     "cs_invalid_msg_id",
	1:     "cs_logic_min_msg_id",
	60000: "sc_logic_max_msg_id",
	60001: "cs_engine_min_msg_id",
	60002: "c2s_client_session_ping_id",
	60003: "s2c_client_session_pong_id",
	65535: "sc_engine_min_msg_id",
}
var EClient2GameMsgId_value = map[string]int32{
	"cs_invalid_msg_id":          0,
	"cs_logic_min_msg_id":        1,
	"sc_logic_max_msg_id":        60000,
	"cs_engine_min_msg_id":       60001,
	"c2s_client_session_ping_id": 60002,
	"s2c_client_session_pong_id": 60003,
	"sc_engine_min_msg_id":       65535,
}

func (x EClient2GameMsgId) String() string {
	return proto.EnumName(EClient2GameMsgId_name, int32(x))
}
func (EClient2GameMsgId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type S2SBaseMsgId int32

const (
	S2SBaseMsgId_s2s_invalid_msg_id               S2SBaseMsgId = 0
	S2SBaseMsgId_s2s_engine_min_msg_id            S2SBaseMsgId = 1
	S2SBaseMsgId_s2s_server_session_veriry_req_id S2SBaseMsgId = 2
	S2SBaseMsgId_s2s_server_session_veriry_ack_id S2SBaseMsgId = 3
	S2SBaseMsgId_s2s_server_session_ping_id       S2SBaseMsgId = 4
	S2SBaseMsgId_s2s_server_session_pong_id       S2SBaseMsgId = 5
	S2SBaseMsgId_s2s_client_session_ping_id       S2SBaseMsgId = 6
	S2SBaseMsgId_s2s_client_session_pong_id       S2SBaseMsgId = 7
	S2SBaseMsgId_service_discovery_req_id         S2SBaseMsgId = 8
	S2SBaseMsgId_service_discovery_ack_id         S2SBaseMsgId = 9
	S2SBaseMsgId_s2s_engine_max_msg_id            S2SBaseMsgId = 300
)

var S2SBaseMsgId_name = map[int32]string{
	0:   "s2s_invalid_msg_id",
	1:   "s2s_engine_min_msg_id",
	2:   "s2s_server_session_veriry_req_id",
	3:   "s2s_server_session_veriry_ack_id",
	4:   "s2s_server_session_ping_id",
	5:   "s2s_server_session_pong_id",
	6:   "s2s_client_session_ping_id",
	7:   "s2s_client_session_pong_id",
	8:   "service_discovery_req_id",
	9:   "service_discovery_ack_id",
	300: "s2s_engine_max_msg_id",
}
var S2SBaseMsgId_value = map[string]int32{
	"s2s_invalid_msg_id":               0,
	"s2s_engine_min_msg_id":            1,
	"s2s_server_session_veriry_req_id": 2,
	"s2s_server_session_veriry_ack_id": 3,
	"s2s_server_session_ping_id":       4,
	"s2s_server_session_pong_id":       5,
	"s2s_client_session_ping_id":       6,
	"s2s_client_session_pong_id":       7,
	"service_discovery_req_id":         8,
	"service_discovery_ack_id":         9,
	"s2s_engine_max_msg_id":            300,
}

func (x S2SBaseMsgId) String() string {
	return proto.EnumName(S2SBaseMsgId_name, int32(x))
}
func (S2SBaseMsgId) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type C2SClientSessionPing struct {
}

func (m *C2SClientSessionPing) Reset()                    { *m = C2SClientSessionPing{} }
func (m *C2SClientSessionPing) String() string            { return proto.CompactTextString(m) }
func (*C2SClientSessionPing) ProtoMessage()               {}
func (*C2SClientSessionPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type S2CClientSessionPong struct {
}

func (m *S2CClientSessionPong) Reset()                    { *m = S2CClientSessionPong{} }
func (m *S2CClientSessionPong) String() string            { return proto.CompactTextString(m) }
func (*S2CClientSessionPong) ProtoMessage()               {}
func (*S2CClientSessionPong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type S2SServerSessionVeriryReq struct {
	ServerId      uint64 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerType    uint32 `protobuf:"varint,2,opt,name=server_type,json=serverType" json:"server_type,omitempty"`
	ServerTypeStr string `protobuf:"bytes,3,opt,name=server_type_str,json=serverTypeStr" json:"server_type_str,omitempty"`
	Ip            string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Token         string `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
}

func (m *S2SServerSessionVeriryReq) Reset()                    { *m = S2SServerSessionVeriryReq{} }
func (m *S2SServerSessionVeriryReq) String() string            { return proto.CompactTextString(m) }
func (*S2SServerSessionVeriryReq) ProtoMessage()               {}
func (*S2SServerSessionVeriryReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type S2SServerSessionVeriryAck struct {
}

func (m *S2SServerSessionVeriryAck) Reset()                    { *m = S2SServerSessionVeriryAck{} }
func (m *S2SServerSessionVeriryAck) String() string            { return proto.CompactTextString(m) }
func (*S2SServerSessionVeriryAck) ProtoMessage()               {}
func (*S2SServerSessionVeriryAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type S2SServerSessionPing struct {
}

func (m *S2SServerSessionPing) Reset()                    { *m = S2SServerSessionPing{} }
func (m *S2SServerSessionPing) String() string            { return proto.CompactTextString(m) }
func (*S2SServerSessionPing) ProtoMessage()               {}
func (*S2SServerSessionPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type S2SServerSessionPong struct {
}

func (m *S2SServerSessionPong) Reset()                    { *m = S2SServerSessionPong{} }
func (m *S2SServerSessionPong) String() string            { return proto.CompactTextString(m) }
func (*S2SServerSessionPong) ProtoMessage()               {}
func (*S2SServerSessionPong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type S2SClientSessionPing struct {
}

func (m *S2SClientSessionPing) Reset()                    { *m = S2SClientSessionPing{} }
func (m *S2SClientSessionPing) String() string            { return proto.CompactTextString(m) }
func (*S2SClientSessionPing) ProtoMessage()               {}
func (*S2SClientSessionPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type S2SClientSessionPong struct {
}

func (m *S2SClientSessionPong) Reset()                    { *m = S2SClientSessionPong{} }
func (m *S2SClientSessionPong) String() string            { return proto.CompactTextString(m) }
func (*S2SClientSessionPong) ProtoMessage()               {}
func (*S2SClientSessionPong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SdConnAttr struct {
	ServerId      uint64 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerType    uint32 `protobuf:"varint,2,opt,name=server_type,json=serverType" json:"server_type,omitempty"`
	ServerTypeStr string `protobuf:"bytes,3,opt,name=server_type_str,json=serverTypeStr" json:"server_type_str,omitempty"`
	Inter         string `protobuf:"bytes,4,opt,name=inter" json:"inter,omitempty"`
	Outer         string `protobuf:"bytes,5,opt,name=outer" json:"outer,omitempty"`
	Token         string `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
}

func (m *SdConnAttr) Reset()                    { *m = SdConnAttr{} }
func (m *SdConnAttr) String() string            { return proto.CompactTextString(m) }
func (*SdConnAttr) ProtoMessage()               {}
func (*SdConnAttr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ServiceDiscovery struct {
	ServerId       uint64        `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	S2SInterListen string        `protobuf:"bytes,2,opt,name=s2s_inter_listen,json=s2sInterListen" json:"s2s_inter_listen,omitempty"`
	S2SOuterListen string        `protobuf:"bytes,3,opt,name=s2s_outer_listen,json=s2sOuterListen" json:"s2s_outer_listen,omitempty"`
	S2SHttpSurl    string        `protobuf:"bytes,4,opt,name=s2s_http_surl,json=s2sHttpSurl" json:"s2s_http_surl,omitempty"`
	S2SHttpCurl1   string        `protobuf:"bytes,5,opt,name=s2s_http_curl1,json=s2sHttpCurl1" json:"s2s_http_curl1,omitempty"`
	S2SHttpCurl2   string        `protobuf:"bytes,6,opt,name=s2s_http_curl2,json=s2sHttpCurl2" json:"s2s_http_curl2,omitempty"`
	ConnList       []*SdConnAttr `protobuf:"bytes,7,rep,name=conn_list,json=connList" json:"conn_list,omitempty"`
	C2SInterListen string        `protobuf:"bytes,8,opt,name=c2s_inter_listen,json=c2sInterListen" json:"c2s_inter_listen,omitempty"`
	C2SOuterListen string        `protobuf:"bytes,9,opt,name=c2s_outer_listen,json=c2sOuterListen" json:"c2s_outer_listen,omitempty"`
	C2SHttpsUrl    string        `protobuf:"bytes,10,opt,name=c2s_https_url,json=c2sHttpsUrl" json:"c2s_https_url,omitempty"`
	C2SHttpsCert   string        `protobuf:"bytes,11,opt,name=c2s_https_cert,json=c2sHttpsCert" json:"c2s_https_cert,omitempty"`
	C2SHttpsKey    string        `protobuf:"bytes,12,opt,name=c2s_https_key,json=c2sHttpsKey" json:"c2s_https_key,omitempty"`
	SdkTcpInter    string        `protobuf:"bytes,13,opt,name=sdk_tcp_inter,json=sdkTcpInter" json:"sdk_tcp_inter,omitempty"`
	SdkTcpOut      string        `protobuf:"bytes,14,opt,name=sdk_tcp_out,json=sdkTcpOut" json:"sdk_tcp_out,omitempty"`
	SdkHttpsUrtl   string        `protobuf:"bytes,15,opt,name=sdk_https_urtl,json=sdkHttpsUrtl" json:"sdk_https_urtl,omitempty"`
	SdkHttpsCert   string        `protobuf:"bytes,16,opt,name=sdk_https_cert,json=sdkHttpsCert" json:"sdk_https_cert,omitempty"`
	SdkHttpsKey    string        `protobuf:"bytes,17,opt,name=sdk_https_key,json=sdkHttpsKey" json:"sdk_https_key,omitempty"`
}

func (m *ServiceDiscovery) Reset()                    { *m = ServiceDiscovery{} }
func (m *ServiceDiscovery) String() string            { return proto.CompactTextString(m) }
func (*ServiceDiscovery) ProtoMessage()               {}
func (*ServiceDiscovery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ServiceDiscovery) GetConnList() []*SdConnAttr {
	if m != nil {
		return m.ConnList
	}
	return nil
}

type ServiceDiscoveryReq struct {
	ServerId uint64 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *ServiceDiscoveryReq) Reset()                    { *m = ServiceDiscoveryReq{} }
func (m *ServiceDiscoveryReq) String() string            { return proto.CompactTextString(m) }
func (*ServiceDiscoveryReq) ProtoMessage()               {}
func (*ServiceDiscoveryReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type ServiceDiscoveryAck struct {
	RebuildFlag bool              `protobuf:"varint,1,opt,name=rebuild_flag,json=rebuildFlag" json:"rebuild_flag,omitempty"`
	VerifyFlag  bool              `protobuf:"varint,2,opt,name=verify_flag,json=verifyFlag" json:"verify_flag,omitempty"`
	SdInfo      *ServiceDiscovery `protobuf:"bytes,3,opt,name=sd_info,json=sdInfo" json:"sd_info,omitempty"`
}

func (m *ServiceDiscoveryAck) Reset()                    { *m = ServiceDiscoveryAck{} }
func (m *ServiceDiscoveryAck) String() string            { return proto.CompactTextString(m) }
func (*ServiceDiscoveryAck) ProtoMessage()               {}
func (*ServiceDiscoveryAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ServiceDiscoveryAck) GetSdInfo() *ServiceDiscovery {
	if m != nil {
		return m.SdInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SClientSessionPing)(nil), "framepb.c2s_client_session_ping")
	proto.RegisterType((*S2CClientSessionPong)(nil), "framepb.s2c_client_session_pong")
	proto.RegisterType((*S2SServerSessionVeriryReq)(nil), "framepb.s2s_server_session_veriry_req")
	proto.RegisterType((*S2SServerSessionVeriryAck)(nil), "framepb.s2s_server_session_veriry_ack")
	proto.RegisterType((*S2SServerSessionPing)(nil), "framepb.s2s_server_session_ping")
	proto.RegisterType((*S2SServerSessionPong)(nil), "framepb.s2s_server_session_pong")
	proto.RegisterType((*S2SClientSessionPing)(nil), "framepb.s2s_client_session_ping")
	proto.RegisterType((*S2SClientSessionPong)(nil), "framepb.s2s_client_session_pong")
	proto.RegisterType((*SdConnAttr)(nil), "framepb.sd_conn_attr")
	proto.RegisterType((*ServiceDiscovery)(nil), "framepb.service_discovery")
	proto.RegisterType((*ServiceDiscoveryReq)(nil), "framepb.service_discovery_req")
	proto.RegisterType((*ServiceDiscoveryAck)(nil), "framepb.service_discovery_ack")
	proto.RegisterEnum("framepb.EClient2GameMsgId", EClient2GameMsgId_name, EClient2GameMsgId_value)
	proto.RegisterEnum("framepb.S2SBaseMsgId", S2SBaseMsgId_name, S2SBaseMsgId_value)
}

var fileDescriptor0 = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x55, 0xdb, 0x6e, 0xd3, 0x4a,
	0x14, 0x3d, 0x76, 0x9a, 0xdb, 0x76, 0x92, 0x36, 0x6e, 0x7b, 0xea, 0xe6, 0x1c, 0x68, 0x88, 0x10,
	0xaa, 0xfa, 0x50, 0x09, 0xf7, 0x0f, 0xa8, 0x04, 0x94, 0x8b, 0x90, 0x92, 0xf2, 0x6c, 0xa5, 0xe3,
	0x49, 0x18, 0xc5, 0xb5, 0x8d, 0xc7, 0xa9, 0xc8, 0x5f, 0xf0, 0x05, 0xfc, 0x00, 0x3c, 0xf3, 0x25,
	0x3c, 0xf1, 0xc4, 0x45, 0x7c, 0x47, 0xd9, 0x73, 0x71, 0x9c, 0x3b, 0x6f, 0xbc, 0xd9, 0x6b, 0x2d,
	0xef, 0x59, 0x6b, 0xcf, 0xf6, 0x0c, 0x58, 0x83, 0xa4, 0x7f, 0x4d, 0x4f, 0xe3, 0x24, 0x4a, 0x23,
	0xbb, 0x2c, 0x5f, 0xe2, 0xab, 0xce, 0x21, 0x1c, 0x10, 0x97, 0x7b, 0x24, 0x60, 0x34, 0x4c, 0x3d,
	0x4e, 0x39, 0x67, 0x51, 0xe8, 0xc5, 0x2c, 0x1c, 0x0a, 0x8a, 0xbb, 0x64, 0x89, 0x8a, 0x90, 0xfa,
	0x68, 0xc0, 0x1d, 0x8e, 0x9f, 0x71, 0x9a, 0xdc, 0xd0, 0x64, 0xca, 0xe1, 0x33, 0x4b, 0x26, 0x5e,
	0x42, 0xdf, 0xda, 0xff, 0x41, 0x55, 0x93, 0xcc, 0x77, 0x8c, 0xb6, 0x71, 0xbc, 0xd5, 0xad, 0x28,
	0xe0, 0xc2, 0xb7, 0x8f, 0xc0, 0xd2, 0x64, 0x3a, 0x89, 0xa9, 0x63, 0x22, 0x5d, 0xef, 0x82, 0x82,
	0x2e, 0x11, 0xb1, 0x1f, 0xc0, 0xf6, 0x8c, 0xc0, 0xe3, 0x69, 0xe2, 0x14, 0x50, 0x54, 0xed, 0xd6,
	0x73, 0x51, 0x2f, 0x4d, 0xec, 0x06, 0x98, 0x2c, 0x76, 0xb6, 0x24, 0x85, 0x4f, 0xf6, 0x1e, 0x14,
	0xd3, 0x68, 0x44, 0x43, 0xa7, 0x28, 0x21, 0xf5, 0xd2, 0x39, 0xda, 0x64, 0xb6, 0x4f, 0x46, 0x2a,
	0xe9, 0x92, 0x20, 0x6f, 0xc2, 0x32, 0x15, 0xe5, 0xd4, 0xda, 0xd6, 0xf1, 0x95, 0xad, 0xfb, 0x6c,
	0x40, 0x8d, 0xfb, 0x1e, 0x89, 0xc2, 0xd0, 0xeb, 0xa7, 0x98, 0xe1, 0xef, 0x74, 0x0a, 0x3b, 0xc3,
	0xc2, 0x94, 0x26, 0xba, 0x59, 0xea, 0x45, 0xa0, 0xd1, 0x58, 0xa0, 0xba, 0x5f, 0xf2, 0x25, 0xef,
	0x62, 0x69, 0xb6, 0x8b, 0x1f, 0x8a, 0xd0, 0x14, 0x35, 0x19, 0xa1, 0x9e, 0xcf, 0x38, 0x89, 0xb0,
	0xfa, 0x64, 0xb3, 0xfb, 0x63, 0xd8, 0x11, 0x6d, 0x90, 0x6b, 0x79, 0x01, 0xe3, 0x29, 0xd6, 0x34,
	0x65, 0xcd, 0x06, 0xe2, 0x17, 0x02, 0x7e, 0x21, 0xd1, 0x4c, 0x29, 0xd7, 0xcf, 0x94, 0x85, 0xa9,
	0xf2, 0xd5, 0x38, 0x57, 0x76, 0xa0, 0x2e, 0x94, 0x6f, 0xd2, 0x34, 0xf6, 0xf8, 0x38, 0x09, 0x74,
	0x20, 0x0b, 0xc1, 0xa7, 0x88, 0xf5, 0x10, 0xb2, 0xef, 0x43, 0x63, 0xaa, 0x21, 0x08, 0x3c, 0xd4,
	0xf9, 0x6a, 0x5a, 0x74, 0x2e, 0xb0, 0x25, 0x95, 0xab, 0xf3, 0xce, 0xaa, 0x5c, 0xdb, 0x85, 0xaa,
	0xdc, 0x2b, 0x61, 0xca, 0x29, 0xb7, 0x0b, 0xc7, 0x96, 0xbb, 0x7f, 0xaa, 0xff, 0x9e, 0xd3, 0xd9,
	0x8d, 0xec, 0x56, 0xc4, 0xa3, 0x70, 0x29, 0xd2, 0x90, 0xc5, 0xdc, 0x15, 0x95, 0x86, 0x2c, 0xe5,
	0x26, 0x8b, 0xb9, 0xab, 0x53, 0xe5, 0x42, 0x6e, 0xa2, 0xdd, 0x72, 0x4f, 0xe4, 0x06, 0x95, 0x9b,
	0x28, 0xb3, 0xfc, 0xb5, 0xca, 0x9d, 0x6b, 0x08, 0x4d, 0x52, 0xc7, 0x52, 0x89, 0x32, 0xd1, 0x39,
	0x62, 0xf3, 0x95, 0x46, 0x74, 0xe2, 0xd4, 0xe6, 0x2b, 0x3d, 0xa7, 0x13, 0xd9, 0x65, 0x7f, 0xe4,
	0xa5, 0x24, 0x56, 0x29, 0x9c, 0xba, 0xee, 0xb2, 0x3f, 0xba, 0x24, 0xb1, 0x4c, 0x60, 0xdf, 0x05,
	0x2b, 0xd3, 0xa0, 0x7f, 0xa7, 0x21, 0x15, 0x55, 0xa5, 0x40, 0xe7, 0xb2, 0xbf, 0xc8, 0x67, 0x8e,
	0xd3, 0xc0, 0xd9, 0xd6, 0xfd, 0xf5, 0x47, 0xda, 0x72, 0x1a, 0xcc, 0xab, 0xa4, 0xe7, 0x9d, 0x79,
	0x55, 0xe6, 0x39, 0x57, 0x09, 0xcf, 0xcd, 0xa9, 0x9f, 0xcc, 0x73, 0xe7, 0x19, 0xec, 0x2f, 0xcd,
	0xe7, 0x9f, 0xcf, 0xa2, 0xe9, 0xb0, 0x9b, 0xb3, 0xc3, 0xfe, 0xde, 0x58, 0x55, 0x0c, 0xcf, 0x0a,
	0xfb, 0x1e, 0xd4, 0x12, 0x7a, 0x35, 0x66, 0x81, 0xef, 0x0d, 0x82, 0xfe, 0x50, 0xd6, 0xab, 0x74,
	0x2d, 0x8d, 0x3d, 0x46, 0x48, 0xfc, 0xb4, 0xe2, 0x70, 0x19, 0x4c, 0x94, 0xc2, 0x94, 0x0a, 0x50,
	0x90, 0x14, 0x9c, 0x41, 0x19, 0x27, 0x87, 0x85, 0x83, 0x48, 0x0e, 0xb9, 0xe5, 0xb6, 0xf2, 0x89,
	0x5a, 0x5c, 0xb4, 0x5b, 0xe2, 0xfe, 0x05, 0x2a, 0x4f, 0xbe, 0x1a, 0xd0, 0xa4, 0xe7, 0xf2, 0x44,
	0x71, 0x9f, 0xa0, 0xf8, 0x25, 0x1f, 0xa2, 0xfd, 0x7d, 0x68, 0x12, 0x31, 0x69, 0x37, 0xfd, 0x80,
	0xf9, 0xde, 0x35, 0x1f, 0x62, 0xc6, 0x9d, 0x7f, 0xec, 0x03, 0xd8, 0x45, 0x38, 0x88, 0x86, 0x8c,
	0x78, 0xd7, 0x2c, 0xcc, 0x08, 0xc3, 0x3e, 0x84, 0x5d, 0x4e, 0x32, 0xa2, 0xff, 0x2e, 0x23, 0xbe,
	0x7d, 0x29, 0xd8, 0x2d, 0xd8, 0xc3, 0x6f, 0x68, 0x38, 0x64, 0x21, 0x9d, 0xfd, 0xe8, 0x3b, 0x72,
	0x6d, 0x68, 0xad, 0xb9, 0x26, 0x84, 0xe2, 0x87, 0x52, 0xac, 0xb9, 0x2d, 0x84, 0xe2, 0xa7, 0xaa,
	0x8f, 0x4b, 0x2f, 0xd7, 0xbf, 0xbd, 0x2d, 0x9c, 0xfc, 0x32, 0xa1, 0xd6, 0x73, 0x7b, 0x8f, 0xfa,
	0x5c, 0xe7, 0xfa, 0x17, 0x6c, 0x75, 0x74, 0x2c, 0x04, 0x3b, 0xc4, 0x7d, 0x71, 0x57, 0xb9, 0x34,
	0x70, 0x92, 0xda, 0x1b, 0xef, 0x24, 0xa1, 0x32, 0x37, 0xab, 0x70, 0x83, 0x85, 0xaa, 0x80, 0xb3,
	0xdd, 0x5a, 0x73, 0x23, 0x08, 0x7e, 0x6b, 0x1d, 0xaf, 0xd3, 0x16, 0x33, 0x7e, 0x4d, 0xbf, 0x4a,
	0xeb, 0x78, 0xfd, 0x7d, 0xd9, 0xfe, 0x1f, 0x9c, 0x95, 0xb3, 0x2c, 0xd8, 0xca, 0x6a, 0x56, 0x7b,
	0xaf, 0x62, 0x9f, 0xe7, 0x5a, 0x94, 0x6f, 0xf2, 0x27, 0xf3, 0xaa, 0x24, 0xaf, 0xff, 0xb3, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x05, 0xa8, 0x99, 0x68, 0x0d, 0x08, 0x00, 0x00,
}
