// Code generated by protoc-gen-go.
// source: cs_sundry_sys.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EScErrorCode int32

const (
	EScErrorCode_com_success                 EScErrorCode = 0
	EScErrorCode_com_fail                    EScErrorCode = 1
	EScErrorCode_com_accountregister_exist   EScErrorCode = 2
	EScErrorCode_com_accountlogin_not_exist  EScErrorCode = 3
	EScErrorCode_com_accountlogin_passwd_err EScErrorCode = 4
)

var EScErrorCode_name = map[int32]string{
	0: "com_success",
	1: "com_fail",
	2: "com_accountregister_exist",
	3: "com_accountlogin_not_exist",
	4: "com_accountlogin_passwd_err",
}
var EScErrorCode_value = map[string]int32{
	"com_success":                 0,
	"com_fail":                    1,
	"com_accountregister_exist":   2,
	"com_accountlogin_not_exist":  3,
	"com_accountlogin_passwd_err": 4,
}

func (x EScErrorCode) String() string {
	return proto.EnumName(EScErrorCode_name, int32(x))
}
func (EScErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type CsTestPressureReq struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CsTestPressureReq) Reset()                    { *m = CsTestPressureReq{} }
func (m *CsTestPressureReq) String() string            { return proto.CompactTextString(m) }
func (*CsTestPressureReq) ProtoMessage()               {}
func (*CsTestPressureReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type ScTestPressureAck struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ScTestPressureAck) Reset()                    { *m = ScTestPressureAck{} }
func (m *ScTestPressureAck) String() string            { return proto.CompactTextString(m) }
func (*ScTestPressureAck) ProtoMessage()               {}
func (*ScTestPressureAck) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type CsGmReq struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *CsGmReq) Reset()                    { *m = CsGmReq{} }
func (m *CsGmReq) String() string            { return proto.CompactTextString(m) }
func (*CsGmReq) ProtoMessage()               {}
func (*CsGmReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type ScServerTimeNtf struct {
	Millsecond int64 `protobuf:"varint,1,opt,name=millsecond" json:"millsecond,omitempty"`
}

func (m *ScServerTimeNtf) Reset()                    { *m = ScServerTimeNtf{} }
func (m *ScServerTimeNtf) String() string            { return proto.CompactTextString(m) }
func (*ScServerTimeNtf) ProtoMessage()               {}
func (*ScServerTimeNtf) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

type ScErrorcodeNtf struct {
	Errorcode EScErrorCode `protobuf:"varint,1,opt,name=errorcode,enum=pb.EScErrorCode" json:"errorcode,omitempty"`
	Paras     []string     `protobuf:"bytes,2,rep,name=paras" json:"paras,omitempty"`
}

func (m *ScErrorcodeNtf) Reset()                    { *m = ScErrorcodeNtf{} }
func (m *ScErrorcodeNtf) String() string            { return proto.CompactTextString(m) }
func (*ScErrorcodeNtf) ProtoMessage()               {}
func (*ScErrorcodeNtf) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type ScTipNtf struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *ScTipNtf) Reset()                    { *m = ScTipNtf{} }
func (m *ScTipNtf) String() string            { return proto.CompactTextString(m) }
func (*ScTipNtf) ProtoMessage()               {}
func (*ScTipNtf) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func init() {
	proto.RegisterType((*CsTestPressureReq)(nil), "pb.cs_test_pressure_req")
	proto.RegisterType((*ScTestPressureAck)(nil), "pb.sc_test_pressure_ack")
	proto.RegisterType((*CsGmReq)(nil), "pb.cs_gm_req")
	proto.RegisterType((*ScServerTimeNtf)(nil), "pb.sc_server_time_ntf")
	proto.RegisterType((*ScErrorcodeNtf)(nil), "pb.sc_errorcode_ntf")
	proto.RegisterType((*ScTipNtf)(nil), "pb.sc_tip_ntf")
	proto.RegisterEnum("pb.EScErrorCode", EScErrorCode_name, EScErrorCode_value)
}

var fileDescriptor3 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x51, 0xcd, 0x4e, 0xf3, 0x30,
	0x10, 0xfc, 0x92, 0xf6, 0x03, 0xb2, 0x54, 0x25, 0x32, 0x3d, 0x14, 0x10, 0x3f, 0x8a, 0x04, 0x42,
	0x1c, 0x72, 0x00, 0x4e, 0x5c, 0x11, 0x2f, 0x10, 0x2e, 0xdc, 0x22, 0xd7, 0xd9, 0x56, 0x16, 0x89,
	0x6d, 0xbc, 0x2e, 0xd0, 0x87, 0xe0, 0x9d, 0xd9, 0xa4, 0x14, 0x2a, 0x10, 0x12, 0x27, 0x7b, 0x67,
	0x76, 0x76, 0xf6, 0x07, 0x76, 0x15, 0x95, 0x34, 0x37, 0x95, 0x5f, 0x94, 0xb4, 0xa0, 0xdc, 0x79,
	0x1b, 0xac, 0x88, 0xdd, 0x24, 0xbb, 0x81, 0x11, 0x53, 0x01, 0x29, 0x94, 0xce, 0x23, 0xd1, 0xdc,
	0x63, 0xe9, 0xf1, 0x49, 0x0c, 0x21, 0xd6, 0xd5, 0x38, 0x3a, 0x89, 0xce, 0x7b, 0x05, 0xff, 0x84,
	0x80, 0xbe, 0x91, 0x0d, 0x8e, 0x63, 0x46, 0x92, 0xa2, 0xfb, 0xb7, 0x5a, 0x52, 0xdf, 0xb4, 0x52,
	0x3d, 0xfe, 0x49, 0x7b, 0x0a, 0x09, 0xfb, 0xce, 0x9a, 0xce, 0x6c, 0x0c, 0x9b, 0xca, 0x9a, 0x80,
	0x26, 0x74, 0xaa, 0xa4, 0x58, 0x85, 0xd9, 0x35, 0x08, 0xb6, 0x20, 0xf4, 0xcf, 0xe8, 0xcb, 0xa0,
	0x1b, 0x2c, 0x4d, 0x98, 0x8a, 0x23, 0x80, 0x46, 0xd7, 0x35, 0x21, 0xa7, 0xad, 0x8c, 0xd6, 0x90,
	0xec, 0x01, 0x52, 0x56, 0xa1, 0xf7, 0xd6, 0x2b, 0x5b, 0x2d, 0x35, 0x39, 0x24, 0x9f, 0x40, 0x27,
	0x19, 0x5e, 0xa6, 0xb9, 0x9b, 0xe4, 0x78, 0xaf, 0xee, 0x5a, 0xfc, 0x96, 0xf1, 0xe2, 0x2b, 0x45,
	0x8c, 0xe0, 0xbf, 0x93, 0x5e, 0x12, 0x77, 0xdd, 0xe3, 0x8e, 0x96, 0x41, 0x76, 0x06, 0xd0, 0x8e,
	0xac, 0x5d, 0x57, 0xf3, 0xd7, 0xbe, 0x2f, 0xde, 0x22, 0x18, 0xac, 0x57, 0x16, 0x3b, 0xb0, 0xad,
	0x6c, 0xc3, 0x37, 0x50, 0x8a, 0x37, 0x95, 0xfe, 0x13, 0x03, 0xd8, 0x6a, 0x81, 0xa9, 0xd4, 0x75,
	0x1a, 0x89, 0x43, 0xd8, 0x6b, 0x23, 0xa9, 0x94, 0x9d, 0x9b, 0xe0, 0x71, 0xa6, 0x29, 0xf0, 0xc4,
	0xf8, 0xca, 0x6f, 0x1a, 0xf3, 0xc0, 0xfb, 0x6b, 0x74, 0x6d, 0x67, 0xda, 0x94, 0xc6, 0x86, 0x0f,
	0xbe, 0x27, 0x8e, 0xe1, 0xe0, 0x07, 0xef, 0x24, 0xd1, 0x4b, 0xd5, 0x6e, 0x21, 0xed, 0x4f, 0x36,
	0xba, 0x8b, 0x5f, 0xbd, 0x07, 0x00, 0x00, 0xff, 0xff, 0x53, 0x02, 0xf8, 0x39, 0x08, 0x02, 0x00,
	0x00,
}
